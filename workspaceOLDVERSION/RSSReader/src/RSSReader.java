import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author robert spech.111 https://news.yahoo.com/rss/
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title </title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        String mainTitle = "Empty Title";

        out.println("<html> <head> <title>");
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() > 0) {
            mainTitle = channel.child(getChildElement(channel, "title"))
                    .child(0).label();

        }
        // starts printing the basic header information required
        out.println(mainTitle + "</title>");
        out.println("</head> <body>");
        // closes the basic header and starts the body
        //prints the title in html format

        String url = channel.child(getChildElement(channel, "link")).child(0)
                .label();
        out.println("<h1> <a href =" + url + "> " + mainTitle + " </a> </h1>");
        out.println("<p>");
        // makes the url linked in the Title
        String channelDesc = "No Description";
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() > 0) {
            channelDesc = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }
        out.println(channelDesc);
        // prints the description if its present
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        // starts the table and adds the table headings
        int countThree = 0;
        // this loop will process each instance of an item child
        while (countThree < channel.numberOfChildren()) {
            if (channel.child(countThree).label().equals("item")) {
                processItem(channel.child(countThree), out);
            }
            countThree++;
        }

        // this is where i need to process all of item

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</table>");
        out.println("</body> </html>");
        // prints the three basic closing tags.
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int location = -1;
        int count = 0;
        while (count < xml.numberOfChildren() - 1) {
            // runs through each child
            if (xml.child(count).label().equals(tag)) {
                location = count;
            }
            count++;
        }
        return location;
        // returns the location of the child element if it is present

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String linkLink = "No source available";
        String linkTitle = "No title available";
        String description = "No title available";
        String pubDate = "No date available";
        String source = "Source";
        String titleSource = "Source";
        // starts the variables off with Nothing in case an element isn't present
        out.println("<tr>");

        if ((item.child(getChildElement(item, "pubDate"))
                .numberOfChildren() > 0)) {
            // if there is a pubDate with a child, this loop will enter
            pubDate = item.child(getChildElement(item, "pubDate")).child(0)
                    .label();
            out.println("<td>" + pubDate + "</td>");
            // this prints out the date in HTML format
        } else {
            // if there is no date child, No date will be printed
            out.println("<td>" + pubDate + "</td>");
        }

        if ((item.child(getChildElement(item, "source")).hasAttribute("url"))) {
            // if there is an element with an attribute url, this is entered
            linkLink = item.child(getChildElement(item, "source"))
                    .attributeValue("url");
            // finds the link
            source = item.child(getChildElement(item, "source")).child(0)
                    .label();
            // gets the source
            out.println(
                    "<td> <a href =" + linkLink + ">" + source + " </a> </td>");
            // prints out the source in a hyperlink
        } else {
            // if there is no url attribute, the print statement will show no source
            out.println("<td> " + linkLink + "</td>");
        }

        if ((getChildElement(item, "title") > -1) && item
                .child(getChildElement(item, "title")).numberOfChildren() > 0) {
            // this branch is entered if there is a title child with a child
            linkTitle = item.child(getChildElement(item, "title")).child(0)
                    .label();
            if (item.child(getChildElement(item, "link"))
                    .numberOfChildren() > 0) {
                // if there is a link tag with a child, this branch is entered
                titleSource = item.child(getChildElement(item, "link")).child(0)
                        .label();
                out.println("<td> <a href =" + titleSource + ">" + linkTitle
                        + " </a> </td>");
            } else {
                // if there isn't a link available, only the title will be printed
                out.println("<td> " + linkTitle + " </td>");
            }

        } else if (((getChildElement(item, "description") > -1))
                && item.child(getChildElement(item, "description"))
                        .numberOfChildren() > 0) {
            // this branch is entered only if there is no title and there is a description
            int i = 0;
            while (i < item.child(getChildElement(item, "description"))
                    .numberOfChildren()) {
                // this loop will run through the children of description
                if (!item.child(getChildElement(item, "description")).child(i)
                        .isTag()) {
                    // if its not a tag, its the actual description
                    description = item
                            .child(getChildElement(item, "description"))
                            .child(i).label();
                    if (item.child(getChildElement(item, "link"))
                            .numberOfChildren() > 0) {
                        // if there is a link tag with a child, this branch is entered
                        titleSource = item.child(getChildElement(item, "link"))
                                .child(0).label();
                        out.println("<td> <a href =" + titleSource + ">"
                                + description + "</a> </td>");
                        // if there is a link available, it will be hyperlinked
                    } else {
                        // if there isn't a link, only the description will be printed
                        out.println("<td>" + description + "</td>");
                    }
                    i = item.child(getChildElement(item, "description"))
                            .numberOfChildren();
                }
                i++;
            }
        } else {
            // if there is no title or description, this branch will be entered
            if (item.child(getChildElement(item, "link"))
                    .numberOfChildren() > 0) {
                // if there is a link tag with a child, this branch is entered
                titleSource = item.child(getChildElement(item, "link")).child(0)
                        .label();
                out.println("<td> <a href =" + titleSource + ">" + description
                        + "</a> </td>");
                // this prints out No title but with a source
            } else {
                // if there is absolutely nothing, it will be indicated
                out.println("<td>" + linkTitle + "</td>");
            }
        }

        out.println("</tr>");

    }

    /**
     * Main method. The main method will take in an rss document, create an xml
     * tree and output a file of format html
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        boolean validXML = false;
        out.print("Enter an RSS 2.0 news feed or related url: ");
        String input = in.nextLine();
        XMLTree xml = new XMLTree1(input);
        // creates an xml tree
        while (!validXML) {
            // this loop will determine whether or not the input document was valid
            if (xml.attributeValue("version").equals("2.0")
                    && xml.label().equals("rss")) {
                validXML = true;
            } else {
                // if the document is not valid, it will ask again and create a new tree
                out.print("Enter an RSS 2.0 news feed or related url: ");
                input = in.nextLine();
                xml = new XMLTree1(input);
            }
        }
        boolean validFileName = false;
        String fileName = "";
        // this ensures the user adds .html to the filename
        while (!validFileName) {
            out.print("Enter a file name for the output, include .html: ");
            fileName = in.nextLine();
            final int htmlLength = 5;
            if (fileName.length() > htmlLength
                    && fileName.substring(fileName.length() - htmlLength,
                            fileName.length()).equals(".html")) {
                // if .html isn't the last part of the file, it will ask again
                validFileName = true;
            } else {
                out.println("Enter a valid html file name.");
            }
        }
        SimpleWriter outFile = new SimpleWriter1L(fileName);
        // This creates a new output stream for the file created
        outputHeader(xml.child(0), outFile);
        // this outputs the header
        outputFooter(outFile);
        // outputs the footer

        in.close();
        out.close();
        outFile.close();
        // closes all ins and outs
    }

}
